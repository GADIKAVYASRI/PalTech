class Solution {
    // Function to find the peak element
    // arr[]: input array
    // n: size of array
    public int peakElement(int[] arr, int n) {
        // Base case: if array has only one element
        if (n == 1) return 0;
        
        // Check if first element is peak
        if (arr[0] >= arr[1]) return 0;
        
        // Check if last element is peak
        if (arr[n-1] >= arr[n-2]) return n-1;
        
        // Binary search for peak element
        int left = 1;
        int right = n-2;
        
        while (left <= right) {
            int mid = (left + right) / 2;
            
            // Check if mid is peak
            if (arr[mid] >= arr[mid-1] && arr[mid] >= arr[mid+1]) {
                return mid;
            }
            
            // If element to the right is greater, search right half
            else if (arr[mid] < arr[mid+1]) {
                left = mid + 1;
            }
            
            // If element to the left is greater or equal, search left half
            else {
                right = mid - 1;
            }
        }
        
        // This line should never be reached if the input is valid
        return -1;
    }
}



